// 10
const express = require("express");
const Blockchain = require("../blockchain");
const bodyParser = require("body-parser");
//12
const P2pServer = require("./p2p-server");

//15
const Wallet = require("../wallet");
const TransactionPool = require("../wallet/transaction-pool");
const Miner = require('./miner');

const HTTP_PORT = process.env.HTTP_PORT || 3001;


const app = express();
app.use(bodyParser.json());
const bc = new Blockchain();
const wallet = new Wallet();
const tp = new TransactionPool();

// Endpoint Create a wallet 
app.post("/wallet", (req, res) => {
  // receive a initial balance and verify if it is a number
  const { initialBalance } = req.body;
  if (isNaN(initialBalance)) {
    res.status(400).json({ error: "Initial balance is not a number" });
    return;
  }
  // create a new wallet
  const wallet = new Wallet();
  wallet.balance = initialBalance;
  // add the wallet to the blockchain
  bc.addWallet(wallet);


// Endpoint Create a transaction
// Endpoint Mine transactions
// Endpoint Get the public key of a wallet

//12
/*Pasos actuales
1. se crea la blockchain
2. se crea una wallet
3. se crea el transaction pool
4. se crea el p2p server
5. se crea el miner (mina la transaccion y agrega el bloque a la blockchain)


*/
const p2pServer = new P2pServer(bc, tp);
const miner = new Miner(bc, tp, wallet, p2pServer);

app.get("/new-wallet", (req, res) => {
  const wallet = new Wallet();
  res.json({ publicKey: wallet.publicKey, privateKey: wallet.privateKey });
});


app.get("/blocks", (req, res) => {
  res.json(bc.chain);
});

// mine a new block with the data received 
app.post("/mine", (req, res) => {
  console.log(req.body);
  const block = bc.addBlock(req.body.data);
  console.log(`New block added : ${block.toString()}`);
  p2pServer.syncChains();
  res.redirect("/blocks");
});

app.get("/transactions", (req, res) => {
  res.json(tp.transactions);
});

// create a new transaction
// and broadcast it to the other nodes
app.post("/transact", (req, res) => {
  const { recipient, amount } = req.body;
  const transaction = wallet.createTransaction(recipient, amount, bc, tp);
  console.log(">>>  " + transaction);
  p2pServer.broadcastTransaction(transaction);
  res.redirect("/transactions");
});

app.get('/mine-transactions', (req,res)=>{
  const block = miner.mine();
  console.log(`New block added ${block.toString()}`);
  res.redirect('/blocks');
});

app.get('/public-key', (req, res) => {
  res.json({publicKey: wallet.publicKey});
});

app.listen(HTTP_PORT, () => {
  console.log(`Listening on port ${HTTP_PORT}`);
});
//12
p2pServer.listen();
